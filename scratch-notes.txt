
*** REACT NOTES ***

What is React?:
- a declarative, efficient, and flexible JavaScript library for building user interfaces
- compose complex UIs from small and isolated pieces of code called “components”


Components:
- React.Component
- components tell React what we want to see on the screen
- when data changes, React will update and re-render our components

    // ShoppingList is a "React component class" or "React component type"
    class ShoppingList extends React.Component {
      render() {
        return (
          <div className="shopping-list">
            <h1>Shopping List for {this.props.name}</h1>
            <ul>
              <li>Instagram</li>
              <li>WhatsApp</li>
              <li>Oculus</li>
            </ul>
          </div>
        );
      }
    }
    // Example usage: <ShoppingList name="Mark" />


Props:
- components take in parameters, called props (short for “properties”)
- in React, it’s conventional to use:
    + on[Event] names for props which represent events (ex: onClick)
    + handle[Event] for the methods which handle the events (ex: handleClick)


Render:
- components return a hierarchy of views to display via the render method
- render returns a "React element"


JSX:
- most developers use JSX
- syntax to simplify writing react elements

    // Equivalent to the above ShoppingList syntax
    return React.createElement('div', {className: 'shopping-list'},
      React.createElement('h1', /* ... h1 children ... */),
      React.createElement('ul', /* ... ul children ... */)
    );

- JSX comes with the full power of JavaScript
- each React element is a JavaScript object stored and passed in variables
- refer to the whole shopping list by writing <ShoppingList />


State:
- components way to "remember" things
- set this.state in component constructors
- considered as private to a React component that it’s defined in


setState:
    onClick={() => this.setState({...})}
- by calling this.setState from an onClick handler, we tell React to re-render that component whenever clicked
- when you call setState in a component, React automatically updates the child components inside of it too.


Constructor:
- in JavaScript classes, you need to always call super when defining the constructor of a subclass
- all React component classes that have a constructor should start with a super(props) call


React dev tools extension:
- https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi/related?hl=en
- check the props and the state of your React components


Lifting State Up:
- declare the shared state in a parent component to
    + collect data from multiple children
    + have two child components communicate with each other
- parent components can pass the state back down to the children by using props
- this keeps the child components in sync with each other and with the parent component
- lifting state into a parent component is common when React components are refactored


Immutability:
- there are generally two approaches to changing data, end result is the same
    1. to mutate the data by directly changing the data’s values
        var player = {score: 1, name: 'Jeff'};
        player.score = 2;
    2. to replace the data with a new copy which has the desired changes.
        var player = {score: 1, name: 'Jeff'};
        var newPlayer = Object.assign({}, player, {score: 2});

- By not mutating directly, we gain several benefits:
    + Complex Features Become Simple:
        - “time travel” allows us to review history and “jump back” to previous moves
        - undo and redo certain actions
        - keeps previous version history intact, and can reuse later
    + Detecting Changes:
        - if immutable object that is being referenced is different from the previous one, then the object has changed
    + Determining When to Re-Render in React:
        - the main benefit of immutability is that it helps you build pure components in React
        - helps determine when a component requires re-rendering


Function Components:
- a simpler way to write components that only contain a render method and don’t have their own state
- less tedious to write than classes




*** TUTORIAL WALK-THROUGH ***

Passing Data Through Props:
- Steps 1-2 in index.js
    1. in Board's renderSquare method, pass a prop called value to the Square
    2. change Square’s render method to show the passed prop
- Congratulations! You “passed a prop” from a parent Board component to a child Square component
- Passing props is how information flows in React apps, from parents to children


Making an Interactive Component:
- Steps 3-6 in index.js
    3. add click event listener to the button tag that is returned from the Square component’s render() function
    4. refactor step 3...
        onClick={function() {console.log('click')
        onClick={() => console.log('click')}
    5. add a constructor to the Square class to initialize state
    6. change the Square’s render method to display the current state’s value when clicked
        a. Replace this.props.value with this.state.value inside the <button> tag
        b. Replace the onClick={...} event handler with onClick={() => this.setState({value: 'X'})}
        c. Put the className and onClick props on separate lines for better readability


Completing the Game:
- Steps 7-11 in index.js
    7. add a constructor to the Board and define a squares array in the Board’s constructor
    8. modify the Board's renderSquare method to instruct each individual Square about its current value
        + values of 'X', 'O', or null
    9. change what happens when a Square is clicked, create a way for the Square to update the Board’s state
    10. we’re passing down two props from Board to Square: value and onClick
        a. replace this.state.value with this.props.value in Square’s render method
        b. replace this.setState() with this.props.onClick() in Square’s render method
        c. delete the constructor from Square because Square no longer keeps track of the game’s state
    11. define handleClick in the Board class
*** NOTE: Square components are now controlled components. The Board has full control over them. ***
    12. change the Square to be a function component
    13. make X and O alternate
        a. set the first move to be “X” by default using xIsNext
        b. update the Board’s handleClick function to flip the value of xIsNext
        c. change the “status” text in Board’s render so that it displays which player has the next turn





