
*** REACT NOTES ***

What is React?:
- a declarative, efficient, and flexible JavaScript library for building user interfaces
- compose complex UIs from small and isolated pieces of code called “components”


Components:
- React.Component
- components tell React what we want to see on the screen
- when data changes, React will update and re-render our components

    // ShoppingList is a "React component class" or "React component type"
    class ShoppingList extends React.Component {
      render() {
        return (
          <div className="shopping-list">
            <h1>Shopping List for {this.props.name}</h1>
            <ul>
              <li>Instagram</li>
              <li>WhatsApp</li>
              <li>Oculus</li>
            </ul>
          </div>
        );
      }
    }
    // Example usage: <ShoppingList name="Mark" />


Props:
- components take in parameters, called props (short for “properties”)


Render:
- components return a hierarchy of views to display via the render method
- render returns a "React element"


JSX:
- most developers use JSX
- syntax to simplify writing react elements

    // Equivalent to the above ShoppingList syntax
    return React.createElement('div', {className: 'shopping-list'},
      React.createElement('h1', /* ... h1 children ... */),
      React.createElement('ul', /* ... ul children ... */)
    );

- JSX comes with the full power of JavaScript
- each React element is a JavaScript object stored and passed in variables
- refer to the whole shopping list by writing <ShoppingList />


State:
- components way to "remember" things
- set this.state in component constructors
- considered as private to a React component that it’s defined in


setState:
    onClick={() => this.setState({...})}
- by calling this.setState from an onClick handler, we tell React to re-render that component whenever clicked
- when you call setState in a component, React automatically updates the child components inside of it too.


Constructor:
- in JavaScript classes, you need to always call super when defining the constructor of a subclass
- all React component classes that have a constructor should start with a super(props) call


React dev tools extension:
- https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi/related?hl=en
- check the props and the state of your React components



*** TUTORIAL WALK-THROUGH ***

Passing Data Through Props:
- Steps 1-2 in index.js
    1. in Board's renderSquare method, pass a prop called value to the Square
    2. change Square’s render method to show the passed prop
- Congratulations! You “passed a prop” from a parent Board component to a child Square component
- Passing props is how information flows in React apps, from parents to children


Making an Interactive Component:
- Step 3-6 in index.js
    3. add click event listener to the button tag that is returned from the Square component’s render() function
    4. refactor step 3...
        onClick={function() {console.log('click')
        onClick={() => console.log('click')}
    5. add a constructor to the Square class to initialize state
    6. change the Square’s render method to display the current state’s value when clicked
        a. Replace this.props.value with this.state.value inside the <button> tag
        b. Replace the onClick={...} event handler with onClick={() => this.setState({value: 'X'})}
        c. Put the className and onClick props on separate lines for better readability







